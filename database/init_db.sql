-- This script was generated by the ERD tool in pgAdmin 4.
BEGIN;


DROP TABLE IF EXISTS public.scope;

CREATE TABLE IF NOT EXISTS public.scope
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    title character varying(20) NOT NULL,
    description character varying(1000),
    copyright character varying(40),
    show_illustrations boolean NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (title)
);

DROP TABLE IF EXISTS public.license_agreement_file_for_scope;

CREATE TABLE IF NOT EXISTS public.license_agreement_file_for_scope
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    name character varying(250) NOT NULL,
    comment character varying(1000),
    size double precision NOT NULL,
    content bytea NOT NULL,
    scope_id integer NOT NULL,
    file_id integer NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT scope_id UNIQUE (scope_id)
        INCLUDE(scope_id),
    UNIQUE (file_id)
        INCLUDE(file_id)
);

DROP TABLE IF EXISTS public.illustration_for_scope;

CREATE TABLE IF NOT EXISTS public.illustration_for_scope
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    scope_id integer NOT NULL,
    file_id integer NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (file_id)
        INCLUDE(file_id)
);

DROP TABLE IF EXISTS public.folder;

CREATE TABLE IF NOT EXISTS public.folder
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    scope_id integer NOT NULL,
    title character varying(50) NOT NULL,
    publish boolean NOT NULL,
    "manifest_IOS" boolean NOT NULL,
    identifier character varying(30) NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (title)
        INCLUDE(title)
);

DROP TABLE IF EXISTS public."manifest_for_IOS";

CREATE TABLE IF NOT EXISTS public."manifest_for_IOS"
(
    id integer NOT NULL,
    folder_id integer NOT NULL,
    name character varying(250) NOT NULL,
    content bytea NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT folder_id UNIQUE (folder_id)
        INCLUDE(folder_id)
);

DROP TABLE IF EXISTS public.version;

CREATE TABLE IF NOT EXISTS public.version
(
    id integer NOT NULL,
    version_number character varying(10) NOT NULL,
    date_of_publication date NOT NULL,
    description character varying(1000),
    show_illustration boolean NOT NULL,
    "URLLicense" character varying(25) NOT NULL,
    publish boolean NOT NULL,
    folder_id integer NOT NULL,
    PRIMARY KEY (id)
        INCLUDE(id, version_number),
    UNIQUE (folder_id, version_number)
        INCLUDE(folder_id, version_number)
);

DROP TABLE IF EXISTS public.tag;

CREATE TABLE IF NOT EXISTS public.tag
(
    id integer NOT NULL,
    letter character varying(250) NOT NULL,
    bkg_color character varying NOT NULL,
    letter_color character varying NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.file_for_version;

CREATE TABLE IF NOT EXISTS public.file_for_version
(
    id integer NOT NULL,
    version_id integer NOT NULL,
    file_id integer NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (file_id)
        INCLUDE(file_id)
);

DROP TABLE IF EXISTS public.tag_file_for_version;

CREATE TABLE IF NOT EXISTS public.tag_file_for_version
(
    tag_id integer NOT NULL,
    file_for_version_id integer NOT NULL,
    CONSTRAINT tag_and_version UNIQUE (tag_id, file_for_version_id)
        INCLUDE(tag_id, file_for_version_id)
);

DROP TABLE IF EXISTS public."users";

CREATE TABLE IF NOT EXISTS public."users"
(
    id integer NOT NULL,
    name character varying(40) NOT NULL,
    password character varying(50) NOT NULL,
    blocked boolean NOT NULL DEFAULT false,
    "isAdminManager" boolean NOT NULL DEFAULT false,
    "isAdminScopeManager" boolean NOT NULL DEFAULT false,
    "canCreateAndDeleteScope" boolean DEFAULT false,
    "maxNumberScope" integer DEFAULT 0,
    "maxStorageSpace" integer DEFAULT 0,
    "maxNumberFolder" integer DEFAULT 0,
    role character varying NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.user_scope;

CREATE TABLE IF NOT EXISTS public.user_scope
(
    user_id integer NOT NULL,
    scope_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    UNIQUE (user_id, scope_id)
        INCLUDE(user_id, scope_id)
);

DROP TABLE IF EXISTS public.file;

CREATE TABLE IF NOT EXISTS public.file
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    name character varying(255) NOT NULL,
    size double precision NOT NULL,
    type character varying NOT NULL,
    "dateCreated" date NOT NULL,
    location character varying NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.illustration_for_version;

CREATE TABLE IF NOT EXISTS public.illustration_for_version
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    version_id integer NOT NULL,
    file_id integer NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (file_id)
        INCLUDE(file_id)
);



DROP TABLE IF EXISTS public.role;

DROP TYPE IF EXISTS public."roles";
CREATE TYPE public."roles" AS ENUM ('ADMIN','USER');

CREATE TABLE IF NOT EXISTS public.role
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    user_id integer NOT NULL,
    role_name roles NOT NULL,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.license_agreement_file_for_scope
    ADD CONSTRAINT scope_fkey FOREIGN KEY (scope_id)
    REFERENCES public.scope (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.license_agreement_file_for_scope
    ADD FOREIGN KEY (file_id)
    REFERENCES public.file (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.illustration_for_scope
    ADD FOREIGN KEY (scope_id)
    REFERENCES public.scope (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.illustration_for_scope
    ADD FOREIGN KEY (file_id)
    REFERENCES public.file (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.folder
    ADD FOREIGN KEY (scope_id)
    REFERENCES public.scope (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."manifest_for_IOS"
    ADD FOREIGN KEY (folder_id)
    REFERENCES public.folder (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.version
    ADD FOREIGN KEY (folder_id)
    REFERENCES public.folder (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.file_for_version
    ADD FOREIGN KEY (version_id)
    REFERENCES public.version (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.file_for_version
    ADD FOREIGN KEY (file_id)
    REFERENCES public.file (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.tag_file_for_version
    ADD FOREIGN KEY (tag_id)
    REFERENCES public.tag (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.tag_file_for_version
    ADD FOREIGN KEY (file_for_version_id)
    REFERENCES public.file_for_version (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.user_scope
    ADD FOREIGN KEY (user_id)
    REFERENCES public."users" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.user_scope
    ADD FOREIGN KEY (scope_id)
    REFERENCES public.scope (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.file
    ADD FOREIGN KEY (id)
    REFERENCES public.version (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.illustration_for_version
    ADD FOREIGN KEY (file_id)
    REFERENCES public.file (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.illustration_for_version
    ADD FOREIGN KEY (version_id)
    REFERENCES public.version (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.role
    ADD FOREIGN KEY (user_id)
    REFERENCES public."users" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;